###########################General information###################
#000 ——> z=3
#001 ——> z=2
#002 ——> z=1
#003 ——> z=0.5
#004 ——> z=0

###########################To import the particle data###################
import readgadget
import numpy as np
import MAS_library as MASL

# input files
snapshot = '/Users/finlaysime/Desktop/Senior Honour Project/snapdir_004/snap_004'
print("snapshot files imported")

#[1](CDM), [2](neutrinos) or [1,2](CDM+neutrinos)
     
ptype_CDM = [1]
ptype_Neutrino = [2]

# read header
header   = readgadget.header(snapshot)
BoxSize  = header.boxsize/1e3  #Mpc/h
Nall     = header.nall         #Total number of particles
Masses   = header.massarr*1e10 #Masses of the particles in Msun/h
Omega_m  = header.omega_m      #value of Omega_m
Omega_l  = header.omega_l      #value of Omega_l
h        = header.hubble       #value of h
redshift = header.redshift     #redshift of the snapshot
Hubble   = 100.0*np.sqrt(Omega_m*(1.0+redshift)**3+Omega_l)#Value of H(z) in km/s/(Mpc/h)

# read positions, velocities and IDs of the particles
pos_CDM = readgadget.read_block(snapshot, "POS ", ptype_CDM)/1e3 #positions in Mpc/h
vel_CDM = readgadget.read_block(snapshot, "VEL ", ptype_CDM)     #peculiar velocities in km/s
ids_CDM = readgadget.read_block(snapshot, "ID  ", ptype_CDM)-1


pos_Neutrino = readgadget.read_block(snapshot, "POS ", ptype_Neutrino)/1e3
vel_Neutrino = readgadget.read_block(snapshot, "VEL ", ptype_Neutrino)
ids_Neutrino = readgadget.read_block(snapshot, "ID  ", ptype_Neutrino)-1

print("Positions & velocities acquired")

#############################To get the halo catalog######################################
f_catalog = '/Users/finlaysime/Desktop/Senior Honour Project/halos/1/out_4_pid.list' 

# read the halo catalog
data = np.loadtxt(f_catalog)
print("Halo data imported")

pid  = data[:,41]
idx = pid == -1  #ids of the halos
data_halo = data[idx]

#Units: Masses in Msun / h
#Units: Positions in Mpc / h (comoving)
#Units: Velocities in km / s (physical, peculiar)
#BoxSize=1000.0

halo_pos = data_halo[:,8:11]
halo_velocity = data_halo[:,11:14]
halo_mass = data_halo[:,2]
print("Halo positions, velocites, & masses acquired")

#############################Build density field######################################
grid_CDM = int(input("Grid size CDM: ")) #the density field will have grid^3 voxels
grid_N = int(input("Grid size Neutrinos: "))
MAS = 'CIC' #Mass-assignment scheme:'NGP', 'CIC', 'TSC', 'PCS'
do_RSD = False # Dont do redshift-space distortions
axis = 0 #axis along which place RSD; not used here
verbose = True #whether to print information about progress

#Print some information
print('BoxSize: %.3f Mpc/h'%BoxSize)
print('Redshift: %.3f'%redshift)
print('CDM:')
print('%.3f < X < %.3f'%(np.min(pos_CDM[:,0]), np.max(pos_CDM[:,0])))
print('%.3f < Y < %.3f'%(np.min(pos_CDM[:,1]), np.max(pos_CDM[:,1])))
print('%.3f < Z < %.3f'%(np.min(pos_CDM[:,2]), np.max(pos_CDM[:,2])))
print('NEUTRINOS:')
print('%.3f < X < %.3f'%(np.min(pos_Neutrino[:,0]), np.max(pos_Neutrino[:,0])))
print('%.3f < Y < %.3f'%(np.min(pos_Neutrino[:,1]), np.max(pos_Neutrino[:,1])))
print('%.3f < Z < %.3f'%(np.min(pos_Neutrino[:,2]), np.max(pos_Neutrino[:,2])))

# Compute the effective number of particles/mass in each voxel
delta_pos_CDM = MASL.density_field_gadget(snapshot, ptype_CDM, grid_CDM, MAS, do_RSD, axis, verbose)
delta_pos_Neutrino = MASL.density_field_gadget(snapshot, ptype_Neutrino, grid_N, MAS, do_RSD, axis, verbose)

# compute the density contrast
delta_pos_CDM /= np.mean(delta_pos_CDM, dtype=np.float64); delta_pos_CDM -= 1
delta_pos_Neutrino /= np.mean(delta_pos_Neutrino, dtype=np.float64); delta_pos_Neutrino -= 1


size_CDM = BoxSize / grid_CDM
size_N = BoxSize / grid_N
print(f"Voxel size in CDM is {size_CDM}Mpc/h")
print(f"Voxel size in Neutrinos is {size_N}Mpc/h")
while True:
    Slice_CDM = int(input("No. of slices for CDM: "))
    Slice_N = int(input("No. of slices for Neutrinos: "))
    
    if isinstance(Slice_CDM, int) and isinstance(Slice_N, int):
        break
    else:
        print("Invalid input, please enter an integer")

slice_thickness_CDM = Slice_CDM * size_CDM
slice_thickness_N = Slice_N * size_N
print(f"CDM slice thickness: {slice_thickness_CDM} Mpc/h")
print(f"Neutrino slice thickness: {slice_thickness_N} Mpc/h")

#Take the first 5 components along the first axis and compute the mean value
mean_density_CDM = np.mean(delta_pos_CDM[:Slice_CDM,:,:],axis=0)
mean_density_Neutrino = np.mean(delta_pos_Neutrino[:Slice_N,:,:],axis=0)

print('Image shape:',mean_density_CDM.shape)
print('%.3e < mass < %.3e'%(np.min(mean_density_CDM), np.max(mean_density_CDM)))

print("CDM:")
# now lets consider the particles in that slide
indexes_CDM = np.where((pos_CDM[:,0]<slice_thickness_CDM))
pos_slide_CDM = pos_CDM[indexes_CDM]
print('%.3f < X < %.3f'%(np.min(pos_slide_CDM[:,0]), np.max(pos_slide_CDM[:,0])))
print('%.3f < Y < %.3f'%(np.min(pos_slide_CDM[:,1]), np.max(pos_slide_CDM[:,1])))
print('%.3f < Z < %.3f'%(np.min(pos_slide_CDM[:,2]), np.max(pos_slide_CDM[:,2])))
print('')

print("NEUTRINOS:")
indexes_Neutrino = np.where((pos_Neutrino[:,0]<slice_thickness_N))
pos_slide_Neutrino = pos_Neutrino[indexes_Neutrino]
print('%.3f < X < %.3f'%(np.min(pos_slide_Neutrino[:,0]), np.max(pos_slide_Neutrino[:,0])))
print('%.3f < Y < %.3f'%(np.min(pos_slide_Neutrino[:,1]), np.max(pos_slide_Neutrino[:,1])))
print('%.3f < Z < %.3f'%(np.min(pos_slide_Neutrino[:,2]), np.max(pos_slide_Neutrino[:,2])))


#################################Draw Density Fields#####################################
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable
from pylab import *

fig, (ax1, ax2) = plt.subplots(1, 2)
fig.subplots_adjust(wspace=1.0)

im1 = ax1.imshow(mean_density_CDM.T, vmin=-1, vmax=5, cmap='bone', origin='lower')
ax1_divider = make_axes_locatable(ax1)
cax1 = ax1_divider.append_axes("right", size="5%", pad="2%")
cb1 = fig.colorbar(im1, cax=cax1, label='rho/<rho>')
ax1.set_xlabel('Voxel no.')
ax1.set_ylabel('Voxel no.')
ax1.set_title('Overdensity field of CDM')

im2 = ax2.imshow(mean_density_Neutrino.T, cmap='plasma', origin='lower')
ax2_divider = make_axes_locatable(ax2)
cax2 = ax2_divider.append_axes("right", size='5%', pad='2%')
cb2 = fig.colorbar(im2, cax=cax2, label='rho/<rho>')
ax2.set_xlabel('Voxel no.')
ax2.set_ylabel('Voxel no.')
ax2.set_title('Overdensity field of Neutrinos')

plt.show()
